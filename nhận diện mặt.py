import cv2

# Kh·ªüi t·∫°o b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t Haar Cascade
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# M·ªü camera (0 l√† camera m·∫∑c ƒë·ªãnh)
cap = cv2.VideoCapture(0)

print("üé• ƒêang m·ªü camera, nh·∫•n 'q' ƒë·ªÉ tho√°t...")
while True:
    # ƒê·ªçc t·ª´ng khung h√¨nh t·ª´ camera
    ret, frame = cap.read()
    if not ret:
        break

    # Chuy·ªÉn khung h√¨nh sang x√°m ƒë·ªÉ x·ª≠ l√Ω nhanh h∆°n
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Ph√°t hi·ªán khu√¥n m·∫∑t
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # V·∫Ω h√¨nh ch·ªØ nh·∫≠t quanh khu√¥n m·∫∑t
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Hi·ªÉn th·ªã khung h√¨nh
    cv2.imshow("Face Detection", frame)

    # Tho√°t ch∆∞∆°ng tr√¨nh khi nh·∫•n 'q'
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Gi·∫£i ph√≥ng camera v√† ƒë√≥ng c·ª≠a s·ªï
cap.release()
cv2.destroyAllWindows()